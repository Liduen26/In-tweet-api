# Simple workflow for deploying static content to GitHub Pages
name: "CI-CD In'tweet API"

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "CI"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "test"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: secret
          MYSQL_DATABASE: intweet
          MYSQL_ROOT_PASSWORD: root
        options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3


    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build avec Maven
        run: mvn clean install -DskipTests

      - name: Test bdd
        run:  |
          docker ps -a
          docker logs $(docker ps -q --filter "name=mariadb")
          echo "Attente de l'ouverture du port 32768..."
          until nc -z 127.0.0.1 32768; do
            echo "Port 32768 non disponible..."
            sleep 2
          done
          echo "Port 32768 ouvert, MariaDB semble prÃªt !"

      - name: Execute app tests
        run: mvn test -DDB_PORT=32768 -DDB_USER=user -DDB_PSW=secret -DDB_HOST=127.0.0.1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image 
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/in-tweet-api:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/in-tweet-api:latest ${{ secrets.DOCKER_USERNAME }}/in-tweet-api:${{ github.sha }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/in-tweet-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/in-tweet-api:${{ github.sha }}
